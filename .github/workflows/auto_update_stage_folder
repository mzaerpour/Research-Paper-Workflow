name: Auto-update Stage Folder link

on:
  workflow_dispatch:  # run manually from Actions tab

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      PROJECT_OWNER: "mzaerpour"  # your username or org
      PROJECT_NUMBER: "3"         # from https://github.com/users/mzaerpour/projects/3

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Sync Stage → Stage Folder
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          PROJECT_OWNER: ${{ env.PROJECT_OWNER }}
          PROJECT_NUMBER: ${{ env.PROJECT_NUMBER }}
        run: |
          python - <<'PY'
          import os, sys, requests

          token   = os.environ["GH_TOKEN"]
          owner   = os.environ["PROJECT_OWNER"]
          number  = int(os.environ["PROJECT_NUMBER"])

          headers = {
              "Authorization": f"Bearer {token}",
              "Content-Type": "application/json",
              "Accept": "application/vnd.github+json",
          }
          endpoint = "https://api.github.com/graphql"

          def gql(query, variables):
              r = requests.post(endpoint, headers=headers, json={"query": query, "variables": variables})
              r.raise_for_status()
              data = r.json()
              if "errors" in data:
                  print("GraphQL errors:", data["errors"], file=sys.stderr)
                  sys.exit(1)
              return data["data"]

          # Fetch project (user first, then org)
          base_query = '''
          query($owner:String!, $number:Int!){
            user(login:$owner){
              projectV2(number:$number){
                id
                fields(first:50){
                  nodes{
                    ... on ProjectV2Field{ id name }
                    ... on ProjectV2SingleSelectField{ id name options{ id name } }
                  }
                }
                items(first:200){
                  nodes{
                    id
                    fieldValues(first:25){
                      nodes{
                        ... on ProjectV2ItemFieldSingleSelectValue{
                          field{ ... on ProjectV2SingleSelectField { id name } }
                          name
                        }
                        ... on ProjectV2ItemFieldTextValue{
                          field{ id name }
                          text
                        }
                      }
                    }
                  }
                }
              }
            }
          }'''
          data = gql(base_query, {"owner": owner, "number": number})
          project = data.get("user", {}).get("projectV2") if data.get("user") else None

          if not project:
              org_query = base_query.replace("user(login:$owner)", "organization(login:$owner)")
              data = gql(org_query, {"owner": owner, "number": number})
              project = data.get("organization", {}).get("projectV2")

          if not project:
              print("❌ Project not found. Check PROJECT_OWNER/PROJECT_NUMBER.", file=sys.stderr)
              sys.exit(1)

          project_id = project["id"]
          fields = project["fields"]["nodes"]

          # Find field IDs
          stage_field_id = None
          stage_folder_field_id = None
          for f in fields:
              if f["name"] == "Stage":
                  stage_field_id = f["id"]
              if f["name"] == "Stage Folder":
                  stage_folder_field_id = f["id"]

          if not stage_field_id or not stage_folder_field_id:
              print("❌ Missing fields. Ensure 'Stage' (single select) and 'Stage Folder' (text) exist.", file=sys.stderr)
              sys.exit(1)

          base = "https://github.com/mzaerpour/Research-Paper-Workflow/tree/main"
          mapping = {
              "Conceptualization": f"{base}/docs/conceptualization",
              "Lit Review":        f"{base}/docs/lit_review",
              "Data":              f"{base}/data",
              "Analysis":          f"{base}/code",
              "Visualization":     f"{base}/figures",
              "Writing":           f"{base}/drafts",
              "Submission":        f"{base}/docs/submission",
              "Under Review":      f"{base}/docs/under_review",
              "Revision-1":        f"{base}/docs/revision_1",
              "Revision-2":        f"{base}/docs/revision_2",
              "Publication":       f"{base}/docs/publication",
          }

          update_mut = '''
          mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $text:String!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$projectId,
              itemId:$itemId,
              fieldId:$fieldId,
              value:{ text:$text }
            }){ projectV2Item { id } }
          }'''

          updated = 0
          for item in project["items"]["nodes"]:
              stage_val = None
              current_text = None
              for fv in item.get("fieldValues", {}).get("nodes", []):
                  fld = fv.get("field")
                  if not fld:
                      continue
                  if fld.get("name") == "Stage" and "name" in fv:
                      stage_val = fv["name"]
                  if fld.get("name") == "Stage Folder" and "text" in fv:
                      current_text = fv["text"]

              if not stage_val:
                  continue

              target = mapping.get(stage_val)
              if not target or target == current_text:
                  continue

              gql(update_mut, {
                  "projectId": project_id,
                  "itemId": item["id"],
                  "fieldId": stage_folder_field_id,
                  "text": target
              })
              updated += 1

          print(f"✅ Updated {updated} item(s).")
          PY
