name: New Paper – Create repo, scaffold, add collaborators, create/update Project row

on:
  workflow_dispatch:
    inputs:
      item_title:
        description: "Project row title (e.g., 'Child exposure to heatwave in Canada')"
        required: true
        type: string
      new_repo_name:
        description: "New repository name (e.g., paper-heatwave-children-2025)"
        required: true
        type: string
      repo_visibility:
        description: "Visibility of the new repo"
        required: true
        type: choice
        options: [private, public]
        default: private
      collaborators:
        description: "Comma-separated GitHub usernames to add (optional)"
        required: false
        type: string
      # You created this in Step 1:
      template_owner:
        description: "Template repo owner"
        required: true
        type: string
        default: "mzaerpour"
      template_repo:
        description: "Template repo name"
        required: true
        type: string
        default: "research-project-template"
      # Your Project (the dashboard) owner & number:
      project_owner:
        description: "Owner of your GitHub Project (username or org)"
        required: true
        type: string
        default: "mzaerpour"
      project_number:
        description: "Project number (from the project URL)"
        required: true
        type: string
        default: "3"

jobs:
  new-paper:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create repo, scaffold if needed, add collaborators, create/update Project row
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          ITEM_TITLE: ${{ github.event.inputs.item_title }}
          NEW_REPO_NAME: ${{ github.event.inputs.new_repo_name }}
          REPO_VISIBILITY: ${{ github.event.inputs.repo_visibility }}
          TEMPLATE_OWNER: ${{ github.event.inputs.template_owner }}
          TEMPLATE_REPO: ${{ github.event.inputs.template_repo }}
          PROJECT_OWNER: ${{ github.event.inputs.project_owner }}
          PROJECT_NUMBER: ${{ github.event.inputs.project_number }}
          COLLABS: ${{ github.event.inputs.collaborators }}
        run: |
          python - <<'PY'
          import os, sys, base64, requests

          token   = os.environ["GH_TOKEN"]
          item_title = os.environ["ITEM_TITLE"].strip()
          new_repo_name = os.environ["NEW_REPO_NAME"].strip()
          repo_visibility = os.environ["REPO_VISIBILITY"].strip().lower()
          template_owner = os.environ["TEMPLATE_OWNER"].strip()
          template_repo  = os.environ["TEMPLATE_REPO"].strip()
          project_owner  = os.environ["PROJECT_OWNER"].strip()
          project_number = int(os.environ["PROJECT_NUMBER"])
          collabs = [u.strip() for u in (os.environ.get("COLLABS","").split(",") if os.environ.get("COLLABS") else []) if u.strip()]

          REST = "https://api.github.com"
          GQL  = f"{REST}/graphql"
          H = {
            "Authorization": f"Bearer {token}",
            "Accept": "application/vnd.github+json",
            "Content-Type": "application/json",
          }

          def rest(method, url, **kw):
            r = requests.request(method, url, headers=H, **kw)
            if r.status_code >= 400:
              raise requests.HTTPError(f"{method} {url} -> {r.status_code} {r.text}", response=r)
            return r.json() if r.text else {}

          def gql(q, v):
            r = requests.post(GQL, headers=H, json={"query": q, "variables": v})
            j = r.json()
            if "errors" in j:
              raise RuntimeError(j["errors"])
            return j["data"]

          # who am I (so we know where we can create repos)
          me = rest("GET", f"{REST}/user")["login"]

          # 1) Create/reuse repo from template
          created = False
          exists = False
          try:
            print(f"→ Template generate: {template_owner}/{template_repo} → {project_owner}/{new_repo_name}")
            payload = {
              "owner": project_owner,
              "name": new_repo_name,
              "private": (repo_visibility == "private"),
              "include_all_branches": False,
            }
            rest("POST", f"{REST}/repos/{template_owner}/{template_repo}/generate", json=payload)
            created = True
            print("✔ Created from template")
          except Exception as e:
            if "name already exists" in str(e):
              exists = True
              print("ℹ️ Repo already exists; will reuse")
            else:
              # try plain create
              print(f"⚠️ Template generate failed: {e} → try plain create")
              try:
                payload = {
                  "name": new_repo_name,
                  "private": (repo_visibility == "private"),
                  "auto_init": True,
                  "description": "Research paper repo scaffolded by workflow.",
                }
                if project_owner == me:
                  rest("POST", f"{REST}/user/repos", json=payload)
                else:
                  rest("POST", f"{REST}/orgs/{project_owner}/repos", json=payload)
                created = True
                print("✔ Empty repo created")
              except Exception as e2:
                if "name already exists" in str(e2):
                  exists = True
                  print("ℹ️ Repo already exists; will reuse")
                else:
                  raise

          # 2) Resolve repo info
          q_repo = """
          query($owner:String!,$name:String!){
            repository(owner:$owner, name:$name){
              id url nameWithOwner defaultBranchRef { name }
            }
          }"""
          repo_data = gql(q_repo, {"owner": project_owner, "name": new_repo_name})["repository"]
          repo_id = repo_data["id"]
          repo_url = repo_data["url"]
          owner_repo = repo_data["nameWithOwner"]
          default_branch = (repo_data["defaultBranchRef"]["name"] if repo_data["defaultBranchRef"] else "main") or "main"
          print(f"✔ Repo ready: {owner_repo} ({repo_url}) default_branch={default_branch}")

          # 3) Scaffold standard folders/files if missing
          def file_exists(path):
            r = requests.get(f"{REST}/repos/{project_owner}/{new_repo_name}/contents/{path}?ref={default_branch}", headers=H)
            return r.status_code == 200

          def putfile(path, content):
            if file_exists(path):
              return
            b64 = base64.b64encode(content.encode("utf-8")).decode("ascii")
            rest("PUT", f"{REST}/repos/{project_owner}/{new_repo_name}/contents/{path}",
                 json={"message": f"Add {path}", "content": b64, "branch": default_branch})

          putfile("README.md", f"# {new_repo_name}\n\nThis repo follows the Research Paper Workflow structure.\n")
          scaffold = {
            "data/README.md": "Data access notes. Do not commit raw sensitive data.\n",
            "code/README.md": "Analysis code entry points, environment, and scripts.\n",
            "figures/README.md": "Auto-generated figures saved here by scripts.\n",
            "drafts/README.md": "Manuscript drafts, outlines, and text.\n",
            "docs/conceptualization/README.md": "Concept notes and hypotheses.\n",
            "docs/lit_review/README.md": "Literature review notes and sources.\n",
            "docs/submission/README.md": "Submission files: cover letter, checklist.\n",
            "docs/under_review/README.md": "Correspondence and tracking while under review.\n",
            "docs/revision_1/README.md": "Round 1 revisions: response letter and changes.\n",
            "docs/revision_2/README.md": "Round 2 revisions: response letter and changes.\n",
            "docs/publication/README.md": "Accepted version, proofs, and post-publication materials.\n",
          }
          for path, content in scaffold.items():
            putfile(path, content)
          print("✔ Scaffold verified")

          # 4) Add collaborators
          for u in collabs:
            print(f"→ Adding collaborator: {u}")
            try:
              rest("PUT", f"{REST}/repos/{project_owner}/{new_repo_name}/collaborators/{u}",
                   json={"permission":"push"})
            except Exception as e:
              print(f"⚠️ Could not add collaborator {u}: {e}")

          # 5) Load Project + fields (generic fragments only)
          q_proj = """
          query($owner:String!, $number:Int!){
            user(login:$owner){
              projectV2(number:$number){
                id
                fields(first:50){
                  nodes{
                    ... on ProjectV2FieldCommon       { id name }
                    ... on ProjectV2SingleSelectField { id name options{ id name } }
                  }
                }
                items(first:100){
                  nodes{
                    id
                    content{ __typename
                      ... on DraftIssue { title }
                      ... on Issue      { title }
                      ... on PullRequest{ title }
                    }
                  }
                }
              }
            }
          }"""
          d = gql(q_proj, {"owner": project_owner, "number": project_number})
          proj = d["user"]["projectV2"]
          if not proj:
            raise RuntimeError(f"Could not resolve a ProjectV2 with number {project_number}. Check the project URL.")

          proj_id = proj["id"]
          fields = proj["fields"]["nodes"]

          # find field IDs by name
          repo_field_id = stage_field_id = status_field_id = priority_field_id = stage_folder_field_id = None
          stage_options = status_options = priority_options = []
          for f in fields:
            if f["name"] == "Repository": repo_field_id = f["id"]
            elif f["name"] == "Stage": stage_field_id, stage_options = f["id"], (f.get("options") or [])
            elif f["name"] == "Status": status_field_id, status_options = f["id"], (f.get("options") or [])
            elif f["name"] == "Priority": priority_field_id, priority_options = f["id"], (f.get("options") or [])
            elif f["name"] == "Stage Folder": stage_folder_field_id = f["id"]

          if not repo_field_id: raise RuntimeError("Project missing 'Repository' field.")
          if not stage_field_id or not stage_folder_field_id: raise RuntimeError("Project must have 'Stage' and 'Stage Folder'.")

          def first_id(opts): return (opts[0]["id"] if opts else None)
          stage_default_id   = first_id(stage_options)
          status_default_id  = first_id(status_options)
          priority_default_id= first_id(priority_options)

          # 6) Find or create the row by title
          item_id = None
          for it in proj["items"]["nodes"]:
            c = it.get("content") or {}
            if c.get("title") == item_title:
              item_id = it["id"]; break
          if not item_id:
            mut_create = """
            mutation($projectId:ID!, $title:String!){
              addProjectV2DraftIssue(input:{projectId:$projectId, title:$title}) {
                projectItem { id }
              }
            }"""
            item_id = gql(mut_create, {"projectId": proj_id, "title": item_title})["addProjectV2DraftIssue"]["projectItem"]["id"]
            print(f"✔ Created project row: {item_title}")

          # 7) Set Repository field to this repo
          mut_repo = """
          mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $repoId:ID!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ repositoryId:$repoId }
            }){ projectV2Item{ id } }
          }"""
          gql(mut_repo, {"projectId": proj_id, "itemId": item_id, "fieldId": repo_field_id, "repoId": repo_id})
          print("✔ Linked Repository field")

          # 8) Defaults for Stage/Status/Priority (first options)
          mut_single = """
          mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ singleSelectOptionId:$optionId }
            }){ projectV2Item{ id } }
          }"""
          if stage_default_id:
            gql(mut_single, {"projectId": proj_id, "itemId": item_id, "fieldId": stage_field_id, "optionId": stage_default_id})
            print("✔ Stage set to first option")
          if status_default_id:
            gql(mut_single, {"projectId": proj_id, "itemId": item_id, "fieldId": status_field_id, "optionId": status_default_id})
            print("✔ Status set to first option")
          if priority_default_id:
            gql(mut_single, {"projectId": proj_id, "itemId": item_id, "fieldId": priority_field_id, "optionId": priority_default_id})
            print("✔ Priority set to first option")

          # 9) Compute Stage Folder now (no waiting)
          q_fieldvals = """
          query($itemId:ID!){
            node(id:$itemId){
              ... on ProjectV2Item{
                fieldValues(first:50){
                  nodes{
                    ... on ProjectV2ItemFieldSingleSelectValue{
                      field { ... on ProjectV2SingleSelectField { name } }
                      name
                    }
                  }
                }
              }
            }
          }"""
          vals = gql(q_fieldvals, {"itemId": item_id})["node"]["fieldValues"]["nodes"]
          stage_name = None
          for v in vals:
            fld = v.get("field") or {}
            if fld.get("name") == "Stage":
              stage_name = v.get("name"); break

          base = repo_url.rstrip("/") + f"/tree/{default_branch}"
          paths = {
            "Conceptualization": "/docs/conceptualization",
            "Lit Review":        "/docs/lit_review",
            "Data":              "/data",
            "Analysis":          "/code",
            "Visualization":     "/figures",
            "Writing":           "/drafts",
            "Submission":        "/docs/submission",
            "Under Review":      "/docs/under_review",
            "Revision-1":        "/docs/revision_1",
            "Revision-2":        "/docs/revision_2",
            "Publication":       "/docs/publication",
          }
          link = base + paths.get(stage_name or "", "")
          if link and paths.get(stage_name or ""):
            mut_text = """
            mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $text:String!){
              updateProjectV2ItemFieldValue(input:{
                projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ text:$text }
              }){ projectV2Item{ id } }
            }"""
            gql(mut_text, {"projectId": proj_id, "itemId": item_id, "fieldId": stage_folder_field_id, "text": link})
            print(f"✔ Stage Folder set to {link}")
          else:
            print(f"ℹ️ Stage '{stage_name}' has no mapped folder; Stage Folder left blank")

          print("✅ Done.")
          PY
