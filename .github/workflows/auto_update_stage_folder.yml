name: Auto-update Stage Folder link

on:
  workflow_dispatch: {}          # run manually from Actions tab
  schedule:
    - cron: "* * * * *"        # GitHub Actions minimum schedule = 5 minutes

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      issues: read
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Sync Stage → Stage Folder
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          PROJECT_OWNER: mzaerpour           # <— your project owner (user/org)
          PROJECT_NUMBER: "3"                 # <— from the project URL .../projects/3
        run: |
          python - <<'PY'
          import os, requests

          token   = os.environ["GH_TOKEN"]
          owner   = os.environ["PROJECT_OWNER"]
          number  = int(os.environ["PROJECT_NUMBER"])
          H = {
            "Authorization": f"Bearer {token}",
            "Accept": "application/vnd.github+json",
            "Content-Type": "application/json",
          }
          GQL = "https://api.github.com/graphql"

          def gql(q, v):
            r = requests.post(GQL, headers=H, json={"query": q, "variables": v})
            j = r.json()
            if "errors" in j:
              raise RuntimeError(j["errors"])
            return j["data"]

          # 1) Get project + field ids
          q_fields = """
          query($owner:String!, $number:Int!){
            user(login:$owner){
              projectV2(number:$number){
                id
                fields(first:50){
                  nodes{
                    ... on ProjectV2FieldCommon       { id name }
                    ... on ProjectV2SingleSelectField { id name }
                  }
                }
              }
            }
          }"""
          d = gql(q_fields, {"owner": owner, "number": number})
          proj = d["user"]["projectV2"]
          proj_id = proj["id"]
          fields = {f["name"]: f["id"] for f in proj["fields"]["nodes"]}
          stage_folder_field_id = fields.get("Stage Folder")
          if not stage_folder_field_id:
            raise RuntimeError("Project needs a Text field named 'Stage Folder'.")
          stage_field_id = fields.get("Stage")
          if not stage_field_id:
            raise RuntimeError("Project needs a Single-select field named 'Stage'.")

          # 2) Page through items, read Stage + repo (if Issue), update Stage Folder
          q_items = """
          query($owner:String!, $number:Int!, $after:String){
            user(login:$owner){
              projectV2(number:$number){
                id
                items(first:100, after:$after){
                  pageInfo{ hasNextPage endCursor }
                  nodes{
                    id
                    content{
                      __typename
                      ... on Issue {
                        repository {
                          url
                          defaultBranchRef { name }
                        }
                      }
                      ... on DraftIssue { title }
                    }
                    fieldValues(first:50){
                      nodes{
                        ... on ProjectV2ItemFieldSingleSelectValue{
                          field { ... on ProjectV2SingleSelectField { name } }
                          name
                        }
                        ... on ProjectV2ItemFieldTextValue{
                          field { ... on ProjectV2FieldCommon { name } }
                          text
                        }
                      }
                    }
                  }
                }
              }
            }
          }"""

          mut_text = """
          mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $text:String!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ text:$text }
            }){ projectV2Item{ id } }
          }"""

          # Map Stage → subfolder
          PATHS = {
            "Conceptualization": "/docs/conceptualization",
            "Lit Review":        "/docs/lit_review",
            "Data":              "/data",
            "Analysis":          "/code",
            "Visualization":     "/figures",
            "Writing":           "/drafts",
            "Submission":        "/docs/submission",
            "Under Review":      "/docs/under_review",
            "Revision-1":        "/docs/revision_1",
            "Revision-2":        "/docs/revision_2",
            "Publication":       "/docs/publication",
          }

          after = None
          updates = 0
          while True:
            d = gql(q_items, {"owner": owner, "number": number, "after": after})
            items = d["user"]["projectV2"]["items"]
            for node in items["nodes"]:
              item_id   = node["id"]
              content   = node.get("content") or {}
              fvalues   = node.get("fieldValues", {}).get("nodes", [])

              # read Stage name
              stage_name = None
              for v in fvalues:
                fld = (v.get("field") or {})
                if fld.get("name") == "Stage":
                  stage_name = v.get("name")
                  break
              if not stage_name or stage_name not in PATHS:
                continue

              # derive repo base from Issue content; if Draft, we can’t build a link
              repo_url = None
              branch   = None
              if content.get("__typename") == "Issue":
                repo = content.get("repository") or {}
                repo_url = repo.get("url")
                branch   = (repo.get("defaultBranchRef") or {}).get("name") or "main"
              if not repo_url:
                # No repo (Draft rows) → skip
                continue

              link = repo_url.rstrip("/") + f"/tree/{branch}" + PATHS[stage_name]

              # write Stage Folder
              gql(mut_text, {"projectId": proj_id, "itemId": item_id,
                             "fieldId": stage_folder_field_id, "text": link})
              updates += 1

            if not items["pageInfo"]["hasNextPage"]:
              break
            after = items["pageInfo"]["endCursor"]

          print(f"✔ Updated {updates} item(s).")
          PY
