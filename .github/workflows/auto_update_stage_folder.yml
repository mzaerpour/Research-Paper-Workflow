name: Auto-update Stage Folder link

on:
  workflow_dispatch:        # run manually from Actions tab
  schedule:
    - cron: "* * * * *"  # optional: every 30 minutes

jobs:
  sync:
    runs-on: ubuntu-latest

    # 👇 EDIT THESE TWO to match your project URL
    env:
      PROJECT_OWNER: "mzaerpour"   # your GitHub username or org
      PROJECT_NUMBER: "3"          # from https://github.com/users/mzaerpour/projects/3

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Sync Stage → Stage Folder
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          PROJECT_OWNER: ${{ env.PROJECT_OWNER }}
          PROJECT_NUMBER: ${{ env.PROJECT_NUMBER }}
        run: |
          python - <<'PY'
          import os, sys, requests

          token   = os.environ["GH_TOKEN"]
          owner   = os.environ["PROJECT_OWNER"]
          number  = int(os.environ["PROJECT_NUMBER"])

          headers = {
              "Authorization": f"Bearer {token}",
              "Content-Type": "application/json",
              "Accept": "application/vnd.github+json",
          }
          endpoint = "https://api.github.com/graphql"

          def gql(query, variables):
              r = requests.post(endpoint, headers=headers, json={"query": query, "variables": variables})
              r.raise_for_status()
              data = r.json()
              if "errors" in data:
                  print("GraphQL errors:", data["errors"], file=sys.stderr)
                  sys.exit(1)
              return data["data"]

          # ---------- helpers ----------
          def get_project(mode="user"):
              base = '''
              query($owner:String!, $number:Int!){
                REPLACEME(login:$owner){
                  projectV2(number:$number){
                    id
                    fields(first:50){
                      nodes{
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                        ... on ProjectV2FieldCommon       { id name }
                      }
                    }
                  }
                }
              }'''
              q = base.replace("REPLACEME", mode)
              data = gql(q, {"owner": owner, "number": number})
              key = "user" if mode == "user" else "organization"
              return data.get(key, {}).get("projectV2")

          def get_items_page(mode="user", after=None):
              base = '''
              query($owner:String!, $number:Int!, $after:String){
                REPLACEME(login:$owner){
                  projectV2(number:$number){
                    items(first:100, after:$after){
                      nodes{
                        id
                        fieldValues(first:25){
                          nodes{
                            ... on ProjectV2ItemFieldSingleSelectValue{
                              field { ... on ProjectV2SingleSelectField { id name } }
                              name
                            }
                            ... on ProjectV2ItemFieldTextValue{
                              field { ... on ProjectV2FieldCommon { id name } }
                              text
                            }
                          }
                        }
                      }
                      pageInfo{ hasNextPage endCursor }
                    }
                  }
                }
              }'''
              q = base.replace("REPLACEME", mode)
              data = gql(q, {"owner": owner, "number": number, "after": after})
              key = "user" if mode == "user" else "organization"
              return data[key]["projectV2"]["items"]

          # ---------- 1) get project & field IDs ----------
          project = get_project("user")
          mode = "user"
          if not project:
              project = get_project("organization")
              mode = "organization"

          if not project:
              print("❌ Project not found. Check PROJECT_OWNER/PROJECT_NUMBER.", file=sys.stderr)
              sys.exit(1)

          project_id = project["id"]
          fields = project["fields"]["nodes"]

          stage_field_id = None
          stage_folder_field_id = None
          for f in fields:
              if f["name"] == "Stage":
                  stage_field_id = f["id"]
              if f["name"] == "Stage Folder":
                  stage_folder_field_id = f["id"]

          if not stage_field_id or not stage_folder_field_id:
              print("❌ Missing fields. Ensure 'Stage' (single select) and 'Stage Folder' (text) exist.", file=sys.stderr)
              sys.exit(1)

          # ---------- 2) fetch ALL items with pagination ----------
          all_items = []
          after = None
          while True:
              page = get_items_page(mode=mode, after=after)
              all_items.extend(page["nodes"])
              if page["pageInfo"]["hasNextPage"]:
                  after = page["pageInfo"]["endCursor"]
              else:
                  break

          # ---------- 3) map Stage → folder URL ----------
          base_url = "https://github.com/mzaerpour/Research-Paper-Workflow/tree/main"
          mapping = {
              "Conceptualization": f"{base_url}/docs/conceptualization",
              "Lit Review":        f"{base_url}/docs/lit_review",
              "Data":              f"{base_url}/data",
              "Analysis":          f"{base_url}/code",
              "Visualization":     f"{base_url}/figures",
              "Writing":           f"{base_url}/drafts",
              "Submission":        f"{base_url}/docs/submission",
              "Under Review":      f"{base_url}/docs/under_review",
              "Revision-1":        f"{base_url}/docs/revision_1",
              "Revision-2":        f"{base_url}/docs/revision_2",
              "Publication":       f"{base_url}/docs/publication",
          }

          # ---------- 4) update text field ----------
          update_mut = '''
          mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $text:String!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$projectId,
              itemId:$itemId,
              fieldId:$fieldId,
              value:{ text:$text }
            }){ projectV2Item { id } }
          }'''

          updated = 0
          for item in all_items:
              stage_val = None
              current_text = None
              for fv in item.get("fieldValues", {}).get("nodes", []):
                  fld = fv.get("field")
                  if not fld:
                      continue
                  if fld.get("name") == "Stage" and "name" in fv:
                      stage_val = fv["name"]
                  if fld.get("name") == "Stage Folder" and "text" in fv:
                      current_text = fv["text"]

              if not stage_val:
                  continue

              target = mapping.get(stage_val)
              if not target or target == current_text:
                  continue

              gql(update_mut, {
                  "projectId": project_id,
                  "itemId": item["id"],
                  "fieldId": stage_folder_field_id,
                  "text": target
              })
              updated += 1

          print(f"✅ Updated {updated} item(s).")
          PY
