name: Auto-update Stage Folder link

on:
  workflow_dispatch:
  schedule:
    - cron: "* * * * *"   # every minute (fastest allowed)

jobs:
  sync:
    runs-on: ubuntu-latest

    env:
      PROJECT_OWNER: "mzaerpour"   # <-- set your username/org
      PROJECT_NUMBER: "3"          # <-- set to the number from the project URL

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Sync Stage → Stage Folder (debug)
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          PROJECT_OWNER: ${{ env.PROJECT_OWNER }}
          PROJECT_NUMBER: ${{ env.PROJECT_NUMBER }}
        run: |
          python - <<'PY'
          import os, sys, requests

          token   = os.environ["GH_TOKEN"]
          owner   = os.environ["PROJECT_OWNER"]
          number  = int(os.environ["PROJECT_NUMBER"])

          H = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Accept": "application/vnd.github+json",
          }
          GQL = "https://api.github.com/graphql"

          def gql(q, v):
            r = requests.post(GQL, headers=H, json={"query": q, "variables": v})
            r.raise_for_status()
            j = r.json()
            if "errors" in j:
              print("GraphQL errors:", j["errors"], file=sys.stderr)
              sys.exit(1)
            return j["data"]

          # ---- get project + fields (user, then org) ----
          def get_project(mode="user"):
            q = '''
            query($owner:String!,$number:Int!){
              REPLACEME(login:$owner){
                projectV2(number:$number){
                  id
                  fields(first:50){
                    nodes{
                      ... on ProjectV2SingleSelectField { id name options{ id name } }
                      ... on ProjectV2FieldCommon       { id name }
                    }
                  }
                }
              }
            }'''.replace("REPLACEME", mode)
            d = gql(q, {"owner": owner, "number": number})
            return d["user" if mode=="user" else "organization"]["projectV2"]

          def get_items(mode="user", after=None):
            q = '''
            query($owner:String!,$number:Int!,$after:String){
              REPLACEME(login:$owner){
                projectV2(number:$number){
                  items(first:100, after:$after){
                    nodes{
                      id
                      content{
                        __typename
                        ... on DraftIssue { title }
                        ... on Issue      { title }
                        ... on PullRequest{ title }
                      }
                      fieldValues(first:50){
                        nodes{
                          ... on ProjectV2ItemFieldSingleSelectValue{
                            field { ... on ProjectV2SingleSelectField { id name } }
                            name
                          }
                          ... on ProjectV2ItemFieldTextValue{
                            field { ... on ProjectV2FieldCommon { id name } }
                            text
                          }
                        }
                      }
                    }
                    pageInfo{ hasNextPage endCursor }
                  }
                }
              }
            }'''.replace("REPLACEME", mode)
            d = gql(q, {"owner": owner, "number": number, "after": after})
            return d["user" if mode=="user" else "organization"]["projectV2"]["items"]

          project = get_project("user") or get_project("organization")
          if not project:
            print("❌ Project not found. Check PROJECT_OWNER/PROJECT_NUMBER.")
            sys.exit(1)

          proj_id = project["id"]
          fields = project["fields"]["nodes"]

          stage_field_id = None
          stage_folder_field_id = None
          for f in fields:
            if f["name"] == "Stage":
              stage_field_id = f["id"]
            if f["name"] == "Stage Folder":
              stage_folder_field_id = f["id"]

          if not stage_field_id or not stage_folder_field_id:
            print("❌ Missing fields 'Stage' (single select) or 'Stage Folder' (text).")
            sys.exit(1)

          # fetch all items with pagination
          all_items, after = [], None
          mode = "user"
          try:
            get_items("user")
          except:
            mode = "organization"

          while True:
            page = get_items(mode, after)
            all_items += page["nodes"]
            if page["pageInfo"]["hasNextPage"]:
              after = page["pageInfo"]["endCursor"]
            else:
              break

          base = "https://github.com/mzaerpour/Research-Paper-Workflow/tree/main"
          mapping = {
            "Conceptualization": f"{base}/docs/conceptualization",
            "Lit Review":        f"{base}/docs/lit_review",
            "Data":              f"{base}/data",
            "Analysis":          f"{base}/code",
            "Visualization":     f"{base}/figures",
            "Writing":           f"{base}/drafts",
            "Submission":        f"{base}/docs/submission",
            "Under Review":      f"{base}/docs/under_review",
            "Revision-1":        f"{base}/docs/revision_1",
            "Revision-2":        f"{base}/docs/revision_2",
            "Publication":       f"{base}/docs/publication",
          }

          update_mut = '''
          mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $text:String!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$projectId,
              itemId:$itemId,
              fieldId:$fieldId,
              value:{ text:$text }
            }){ projectV2Item { id } }
          }'''

          updated = 0
          if not all_items:
            print("ℹ️ No items found in this project.")
          for idx, item in enumerate(all_items, 1):
            # get title (if any)
            c = item.get("content")
            title = None
            if c:
              title = c.get("title")
            if not title:
              title = f"(item {idx})"

            stage_val = None
            current_text = None
            for fv in item.get("fieldValues", {}).get("nodes", []):
              fld = fv.get("field")
              if not fld:
                continue
              if fld.get("name") == "Stage" and "name" in fv:
                stage_val = fv["name"]
              if fld.get("name") == "Stage Folder" and "text" in fv:
                current_text = fv["text"]

            print(f"• {title}: Stage = {stage_val!r}; Stage Folder (before) = {current_text!r}")

            if not stage_val:
              print("  ↳ Skipping (no Stage set)")
              continue

            target = mapping.get(stage_val)
            if not target:
              print(f"  ↳ Stage value {stage_val!r} not in mapping. (Check spelling/case.)")
              continue

            gql(update_mut, {
              "projectId": proj_id,
              "itemId": item["id"],
              "fieldId": stage_folder_field_id,
              "text": target
            })
            print(f"  ↳ Wrote Stage Folder = {target}")
            updated += 1

          print(f"✅ Updated {updated} item(s).")
          PY
