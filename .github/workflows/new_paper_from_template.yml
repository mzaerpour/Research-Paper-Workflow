name: New Paper – Create repo, add collaborators, link to Project

on:
  workflow_dispatch:
    inputs:
      item_title:
        description: "Exact row title in your Project (e.g., 'Child exposure to heatwave in Canada')"
        required: true
        type: string
      new_repo_name:
        description: "New repository name (e.g., paper-heatwave-children-2025)"
        required: true
        type: string
      repo_visibility:
        description: "Visibility of the new repo"
        required: true
        type: choice
        options: [private, public]
        default: private
      collaborators:
        description: "Comma-separated GitHub usernames to add (e.g., user1,user2)"
        required: false
        type: string
      template_owner:
        description: "Template repo owner"
        required: true
        type: string
        default: "mzaerpour"
      template_repo:
        description: "Template repo name"
        required: true
        type: string
        default: "paper-project-template"
      project_owner:
        description: "Owner of the GitHub Project (your username or org)"
        required: true
        type: string
        default: "mzaerpour"
      project_number:
        description: "Your Project number (from the project URL)"
        required: true
        type: string
        default: "3"

jobs:
  new-paper:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create repo, add collaborators, link Project row
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          ITEM_TITLE: ${{ github.event.inputs.item_title }}
          NEW_REPO_NAME: ${{ github.event.inputs.new_repo_name }}
          REPO_VISIBILITY: ${{ github.event.inputs.repo_visibility }}
          TEMPLATE_OWNER: ${{ github.event.inputs.template_owner }}
          TEMPLATE_REPO: ${{ github.event.inputs.template_repo }}
          PROJECT_OWNER: ${{ github.event.inputs.project_owner }}
          PROJECT_NUMBER: ${{ github.event.inputs.project_number }}
          COLLABS: ${{ github.event.inputs.collaborators }}
        run: |
          python - <<'PY'
          import os, sys, json, time, requests

          token   = os.environ["GH_TOKEN"]
          item_title = os.environ["ITEM_TITLE"].strip()
          new_repo_name = os.environ["NEW_REPO_NAME"].strip()
          repo_visibility = os.environ["REPO_VISIBILITY"].strip().lower()
          template_owner = os.environ["TEMPLATE_OWNER"].strip()
          template_repo  = os.environ["TEMPLATE_REPO"].strip()
          project_owner  = os.environ["PROJECT_OWNER"].strip()
          project_number = int(os.environ["PROJECT_NUMBER"])
          collabs = [u.strip() for u in (os.environ.get("COLLABS","").split(",") if os.environ.get("COLLABS") else []) if u.strip()]

          REST = "https://api.github.com"
          GQL  = f"{REST}/graphql"
          H = {
            "Authorization": f"Bearer {token}",
            "Accept": "application/vnd.github+json",
            "Content-Type": "application/json",
          }

          def rest(method, url, **kw):
            r = requests.request(method, url, headers=H, **kw)
            if r.status_code >= 400:
              print(f"REST {method} {url} -> {r.status_code} {r.text}")
              r.raise_for_status()
            return r.json() if r.text else {}

          def gql(q, v):
            r = requests.post(GQL, headers=H, json={"query": q, "variables": v})
            j = r.json()
            if "errors" in j:
              raise RuntimeError(j["errors"])
            return j["data"]

          # 1) Create new repo from template (REST)
          payload = {
            "owner": project_owner,         # create under same owner as project
            "name": new_repo_name,
            "private": (repo_visibility == "private"),
            "include_all_branches": False,
          }
          print(f"→ Creating repo {project_owner}/{new_repo_name} from {template_owner}/{template_repo} (visibility={repo_visibility})")
          rest("POST", f"{REST}/repos/{template_owner}/{template_repo}/generate", json=payload)

          # 2) Get new repo id + URL (GraphQL)
          q_repo = """
          query($owner:String!,$name:String!){
            repository(owner:$owner, name:$name){ id url nameWithOwner }
          }"""
          repo_data = gql(q_repo, {"owner": project_owner, "name": new_repo_name})["repository"]
          repo_id = repo_data["id"]
          repo_url = repo_data["url"]
          owner_repo = repo_data["nameWithOwner"]
          print(f"✔ Repo ready: {owner_repo} ({repo_url})")

          # 3) Add collaborators (REST)
          for u in collabs:
            print(f"→ Adding collaborator: {u}")
            # permission can be: pull, triage, push, maintain, admin
            rest("PUT", f"{REST}/repos/{project_owner}/{new_repo_name}/collaborators/{u}", json={"permission":"push"})

          # 4) Find the Project, fields, and the item by title
          q_proj = """
          query($owner:String!, $number:Int!){
            user(login:$owner){
              projectV2(number:$number){
                id
                fields(first:50){
                  nodes{
                    ... on ProjectV2RepositoryField { id name }
                    ... on ProjectV2FieldCommon     { id name }
                    ... on ProjectV2SingleSelectField { id name }
                  }
                }
                items(first:100){
                  nodes{
                    id
                    content{
                      __typename
                      ... on DraftIssue { title }
                      ... on Issue      { title }
                      ... on PullRequest{ title }
                    }
                  }
                }
              }
            }
          }"""
          d = gql(q_proj, {"owner": project_owner, "number": project_number})
          proj = d["user"]["projectV2"]
          proj_id = proj["id"]
          fields = proj["fields"]["nodes"]

          repo_field_id = None
          for f in fields:
            if f["name"] == "Repository":
              repo_field_id = f["id"]
          if not repo_field_id:
            raise RuntimeError("Project is missing a 'Repository' field (type: Repository). Create it first.")

          # Find the item whose title matches item_title
          item_id = None
          for it in proj["items"]["nodes"]:
            c = it.get("content") or {}
            if c.get("title") == item_title:
              item_id = it["id"]
              break
          if not item_id:
            raise RuntimeError(f"Could not find a project item with title: {item_title!r}")

          # 5) Update the item’s Repository field to point to the new repo
          mut = """
          mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $repoId:ID!){
            updateProjectV2ItemFieldValue(input:{
              projectId:$projectId,
              itemId:$itemId,
              fieldId:$fieldId,
              value:{ repositoryId:$repoId }
            }){
              projectV2Item{ id }
            }
          }"""
          gql(mut, {"projectId": proj_id, "itemId": item_id, "fieldId": repo_field_id, "repoId": repo_id})
          print(f"✔ Linked project row '{item_title}' to repository {owner_repo}")

          print("✅ Done: repo created, collaborators added, Project linked.")
          PY
